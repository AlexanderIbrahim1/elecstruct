#include <array>
#include <cstdint>

#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>
#include <catch2/generators/catch_generators_range.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include "elecstruct/integrals/boys.hpp"

constexpr auto boys_fast_input = std::array<double, 13> {
    1.00000000e-06,
    1.00000000e-03,
    1.00000000e-01,
    5.00000000e-01,
    2.66666667e+00,
    4.83333333e+00,
    7.00000000e+00,
    9.16666667e+00,
    1.13333333e+01,
    1.35000000e+01,
    1.56666667e+01,
    1.78333333e+01,
    2.00000000e+01
};

constexpr auto boys_fast_results_from_python = std::array<std::array<double, 13>, 13> {
    std::array<double, 13> {0.9999996666667667, 0.9996667666428618, 0.9676433126355918, 0.8556243918921488, 0.5313469125456042, 0.4023517410321244, 0.33490105817655463, 0.29270569191896995, 0.2632481165939015, 0.2412003690998557, 0.22390130738468209, 0.20985951998827995, 0.19816636308482574}, 
    std::array<double, 13> {0.33333313333340475, 0.33313340474339004, 0.31402947299816125, 0.2490937321795154, 0.0865993989980255, 0.04079915143276738, 0.023856369729357483, 0.015960066969559164, 0.011613359528109754, 0.008933296227905943, 0.007145781396065325, 0.005883911282432441, 0.004954159069220501}, 
    std::array<double, 13> {0.1999998571429127, 0.19985719839755012, 0.18625500479262147, 0.14075053682591274, 0.035684014832114065, 0.011838363149958177, 0.005046944801608424, 0.0026059492780824978, 0.001536534321739995, 0.0009925376935048683, 0.0006841655467885494, 0.0004949079211738925, 0.00037156187866269703}, 
    std::array<double, 13> {0.1428570317460772, 0.14274607718775945, 0.13218802963573895, 0.09722202441693013, 0.020425616800831645, 0.005299848817353563, 0.001737345860177686, 0.0007050153952680428, 0.00033841342575634985, 0.00018375250031251695, 0.00010917034080174414, 6.937911066656927e-05, 4.6445183303996575e-05}, 
    std::array<double, 13> {0.11111102020205865, 0.11102024047063182, 0.1023939470710653, 0.07402351120587763, 0.013780474946816248, 0.0030143790902863957, 0.0008035385039778061, 0.0002634896521660688, 0.00010398205979728249, 4.758876085560128e-05, 2.4384106280556752e-05, 1.3615956520677356e-05, 8.127855549358838e-06}, 
    std::array<double, 13> {0.09090901398604732, 0.09083220115569944, 0.08354052801814148, 0.059680941140265335, 0.01022640436847713, 0.001983048410055632, 0.00045142604073183847, 0.0001236514213997953, 4.0759025586154256e-05, 1.5812144022741758e-05, 6.998933011816383e-06, 3.4352976614281424e-06, 1.8287159697651776e-06}, 
    std::array<double, 13> {0.07692301025643968, 0.07685643965940503, 0.07054195081798369, 0.049959692830285264, 0.008063811905708792, 0.0014331298615764313, 0.0002895574630354076, 6.849280863087508e-05, 1.925214661286695e-05, 6.3912083393990836e-06, 2.452059818357961e-06, 1.0589798742210398e-06, 5.028453628448628e-07}, 
    std::array<double, 13> {0.06666660784316357, 0.06660786944510969, 0.06103971298914155, 0.04294534708107496, 0.006627394415889891, 0.0011038701053572922, 0.00020374036099327019, 4.2869583729254765e-05, 1.0513703576965781e-05, 3.0264721972520003e-06, 1.0123315579964701e-06, 3.854788673751692e-07, 1.6337321408401947e-07}, 
    std::array<double, 13> {0.05882347678020957, 0.05877092163509644, 0.05379138400581854, 0.037649546503491, 0.005611399690415031, 0.0008894594205158207, 0.00015315881781032404, 2.9377069751297247e-05, 6.4296292102253244e-06, 1.6305971804591082e-06, 4.796144004845624e-07, 1.6161282940565577e-07, 6.121342644094634e-08}, 
    std::array<double, 13> {0.052631531328342536, 0.052583981632214685, 0.04808055031477788, 0.03351163084671353, 0.004858189408922622, 0.000740779272420259, 0.00012084413837292805, 2.154251137856443e-05, 4.294253162549316e-06, 9.758960363489169e-07, 2.552039144725573e-07, 7.652596274963549e-08, 2.5964177396841233e-08}, 
    std::array<double, 13> {0.04761900414080675, 0.047575589352006654, 0.04346518972410108, 0.030190326374923703, 0.004279152665011555, 0.0006325719648908765, 9.886833310936547e-05, 1.662783121969194e-05, 3.0716258176054845e-06, 6.359653927498272e-07, 1.4973890064514333e-07, 4.0261715806091364e-08, 1.2281455422938624e-08}, 
    std::array<double, 13> {0.043478220869583736, 0.043438279382337956, 0.039657830850815826, 0.02746619416076432, 0.0038210165142077107, 0.0005507655945519265, 8.316807355301131e-05, 1.3348380642645025e-05, 2.3178022329559916e-06, 4.438634874578625e-07, 9.534451357820993e-08, 2.3201044956133727e-08, 6.396235256481813e-09}, 
    std::array<double, 13> {0.03999996296298041, 0.03996298019896739, 0.03646345766402256, 0.025191805984945977, 0.003449986613245463, 0.00048699980958495106, 7.149883758319598e-05, 1.1048106051770742e-05, 1.8239188147915492e-06, 3.273296713017316e-07, 6.497452098515095e-08, 1.445697024762411e-08, 3.6263064319160784e-09}
};

TEST_CASE("Boys function fast implmenetaiton")
{

    constexpr auto ABS_TOL = 1.0e-7;

    const auto order = static_cast<std::size_t>(GENERATE(range(0, 13)));
    const auto i_input = static_cast<std::size_t>(GENERATE(range(0, 13)));

    const auto x = boys_fast_input[i_input];
    const auto actual = elec::boys_fast(x, order);
    const auto expected = boys_fast_results_from_python[order][i_input];

    REQUIRE_THAT(actual, Catch::Matchers::WithinAbs(expected, ABS_TOL));
}
